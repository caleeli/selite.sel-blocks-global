<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="http://sel-blocks-global.selite.googlecode.com/git/selenese_reference_to_html.xsl"?>
<!-- If you'd like to preview this reference.xml in Firefox, open it either from http://sel-blocks-global.selite.googlecode.com/git/selblocks-global/src/chrome/content/reference.xml, or (once you install SeLite SelBlocksGlobal) as chrome://selite-selblocks-global/content/reference.xml.

Xml-stylesheet (whether remote or even local) didn't load up work when you open this in a browser locally via file://
-->
<apidoc package-name="SelBlocks Global">
<function name="label">
    <comment>Declares a label for 'goto' command.</comment>
</function>
<function name="skipNext">
    <param name="amount">Number of commands to skip. Default 1.</param>
    <comment>Skip one or several next commands, as given in parameter <code>amount</code>.</comment>
</function>
<function name="goto">
    <param name="label">Name of a label to go to</param>
    <comment>Go to the position at the given label.</comment>
</function>
<function name="gotoIf">
    <param name="condExpr">Condition expression. If it evaluates to true (compared non-strictly),
        then the control goes to a statement at the given label.
    </param>
    <param name="label">Name of a label to go to</param>
    <comment>Go to the position at the given label, if condExpr evaluates to true (compared non-strictly).</comment>
</function>
<function name="if">
    <param name="condExpr">Condition expression. It determines whether to run
        the positive branch or negative branch (if present).
    </param>
    <comment>Conditional statement and a start of its positive branch.
        It evaluates given <code>condExpr</code>.
        If it evaluates to true (compared non-strictly), then the control flow continues
        until the matching <code>endIf</code> or matching <code>else</code> (if present). Otherwise,
        if there is a matching <code>else</code> statement, then the control continues from there
        (the negative branch). Otherwise it continues from the matching <code>endIf</code>.
    </comment>
</function>
<function name="else">
    <comment>Negative branch of a matching <code>if</code> statement; optional. If the matching <code>if</code>
        evaluated its condition as false (compared non-strictly), then it passes the control here.
        <br/><br/>If the condition evaluated as true (compared non-strictly), then the positive branch was
        processed (i.e. any statements between the matching <code>if</code> and this <code>else</code>).
        On reaching this <code>else</code>, the control skips this negative branch and continues from the
        matching <code>endIf</code>.
    </comment>
</function>
<function name="endIf">
    <comment>End of conditional statement. After evaluating the condition of the matching <code>if</code>
        and after running its positive (<code>if</code>) branch or its negative branch
        (<code>else</code>, if present), the control switches here. <code>endIf</code> ends the whole
        <code>if</code> (and optional <code>else</code>) structure. It ends the negative
        branch (<code>else</code>, if present), otherwise it ends the positive branch (<code>if</code>).
    </comment>
</function>
<function name="while">
    <param name="condExpr">Condition expression.
    </param>
    <comment>Conditional loop statement. As far as it evaluates to true (compared non-strictly),
        it keeps running all statements up to the matching <code>endWhile</code>.
    </comment>
</function>
<function name="endWhile">
    <comment>End of the matching <code>while</code>.</comment>
</function>
<function name="for">
    <param name="forSpec">Composite defining loop bounds and repetition condition,
        C/C++/Java/Javascript/PHP-like,
        in 3 parts separated by semicolons: <code>initiation; condition; iteration</code>.
        For example: <code>i=0; i &lt;= 100; i++</code>
    </param>
    <param name="localVarsSpec">List of variable(s) used in either initiation, condition
        or iteration parts of parameter <code>forSpec</code>.
    </param>
    <comment>Loop with initiation, condition for repetition and iteration.
        First, it evaluates the initiation part of parameter <code>forSpec</code>.
        Then it evaluates the condition part of <code>forSpec</code>. If true (compared non-strictly), it runs any
        statement(s) between this <code>for</code> and its matching <code>endFor</code>.
        On reaching the matching <code>endFor</code>, it evaluates iteration part of <code>forSpec</code>.
        Then it evaluates the condition part again and if true, it repeats the statements again...
        When the condition part evaluates to false (compared non-strictly), it passes the control
        to the matching <code>endFor</code> statement.
    </comment>
</function>
<function name="endFor">
    <comment>End of <code>for</code> loop.
    </comment>
</function>
<function name="foreach">
    <param name="varName">Variable name, that will be assigned values from <code>valueExpr</code>.</param>
    <param name="valueExpr">Comma-separated values or expressions, that will be iterated through. Can be empty.</param>
    <comment>It iterates through given list of values/expressions, assigning each
        to a stored variable with name <code>varName</code>. For each value, it then runs statement(s)
        up to the matching <code>endForeach</code>.
    </comment>
</function>
<function name="endForeach">
    <comment>End of the matching <code>foreach</code>.</comment>
</function>
<function name="loadVars">
    <param name="xmlfile">File path or a URI to an xml file to load. Value sets is loaded from &lt;vars&gt; element(s).</param>
    <param name="selector">Boolean condition to select a set of values from the XML. Optional; if not present,
        then the XML must have exactly one set of variables - one element &lt;vars&gt;.
    </param>
    <comment>
        Load a set of variable(s) from an XML. If condition is present, then
        <code>loadVars</code> keeps reading sets of values from XML, until the condition evaluates
        to true (compared non-strictly). If it reaches the end of XML and the condition is still false,
        <code>loadVars</code> fails. Each set of variable(s) is within its &lt;vars&gt; element.
        See original reference at <a href="http://refactoror.wikia.com/wiki/Selblocks_Reference">http://refactoror.wikia.com/wiki/Selblocks_Reference</a> for more.
    </comment>
</function>
<function name="forXml">
    <param name="xmlpath">File path or a URI to an xml file.</param>
    <comment>An XML-based loop. (I think that) on each iteration, it loads a set of variables from the XML
    (one set of variables per one element &lt;vars&gt;). Then it runs any statement(s) up to the matching <code>endForXml</code>.
    </comment>
</function>
<function name="endForXml">
    <comment>End of the matching <code>forXml</code>.</comment>
</function>
<function name="continue">
    <comment>Jump back to top of the current (innermost active) loop for next iteration, if any.</comment>
</function>
<function name="breakLoop">
    <comment>Jump back to the bottom of the current (innermost active) loop and exit it.</comment>
</function>
<function name="call">
    <param name="srcName">Name of the script to call.</param>
    <param name="argSpec">Argument(s) passed to the called script, optional.
        Comma-separated assignments in form <code>variableName=expression</code>.
        You can use <code>$storedVariableName</code> to access stored variables in <code>expression</code>.
    </param>
    <comment>Call a script with the given name. Just like calling a function/method in common
        programming languages. It
        <ol>
            <li>saves any stored variables, and it removes them from the current scope</li>
            <li>puts all given arguments to the current scope of stored variables</li>
            <li>passes control to the called <code>script</code></li>
        </ol>
        The called script may be in a different test case, as far as it's a part of the same test suite (this
        is how SelBlocks Global differs from Sel Blocks). If the called script finishes
        correctly - either at its <code>endScript</code> or <code>return</code> (if present) - then
        <ol>
            <li>the control is passed back to the caller</li>
            <li>any stored variables from the called script are lost</li>
            <li>the original stored variables are loaded to the scope</li>
            <li>any returned result from the called script is avaliable in stored variable <code>_result</code></li>
        </ol>
    </comment>
</function>
<function name="function">
    <comment>Start of a script, which is a callable block, like a function/method in common programming languages.
        It gets invoked via <code>call</code> statement. It can (optionally) receive parameter(s)
        and it can (optionally) return a value via <code>return</code>.
        It has a separate scope of stored variables. It contains statement(s) up to the nearest <code>endScript</code>.
        It can call other scripts via <code>call</code>, but it cannot contain other scripts within itself.
        It can call itself recursively, either directly or indirectly.
    </comment>
</function>
<function name="return">
    <param name="value">Value/expression to evaluate and return.</param>
    <comment>It ends the currently executed <code>script</code>, returning the
        flow control to the caller and passing given value as stored variable <code>_result</code>.
    </comment>
</function>
<function name="endFunction">
    <comment>It ends the currently executed <code>script</code>, returning the
        flow control to the caller, without setting stored variable <code>_result</code>.
    </comment>
</function>
<function name="">
    <param name="amount">What to index by. Either <ul>
            <li>string - name of the column to index by</li>
            <li>object
                {<dl>
                    <dt>indexBy</dt>
                    <dd>string, name of the field to index by; required.
                            Values of this field must be unique within the source,
                            unless you also use <code>subIndexBy</code>.
                    </dd>
                    <dt>subIndexBy</dt>
                    <dd>string, name of the field to sub-index by; optional.
                            Used to index within groups or objects that have same <code>indexBy</code> value.
                            Values of this field must be unique within each group.
                        </dd>
                    <dt>target</dt>
                    <dd>string, name of the result stored variable; optional</dd>
                </dl>
                }
            </li>
        </ul>
    </param>
</function>
</apidoc>